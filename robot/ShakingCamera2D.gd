# Attach this script to a camera and increase its shake_intensity to make the
# screen shake.
#
# When you increase the shake_intensity, it goes back down to zero automatically
# and gradually.
class_name ShakingCamera2D
extends Camera2D

# The maximum offset applied to the camera in pixels.
export var max_amplitude := 16.0

# Controls how much the camera moves each frame. Gradually goes down to zero.
var shake_intensity := 0.0 setget set_shake_intensity

# We use Godot's built-in noise generator to create smooth series of random numbers.
var _noise := preload("camera_noise.tres")


func _init() -> void:
    # We randomize the noise at the start so the first shake is different every time.
    # Remember that "random" numbers generated by the computer aren't truly random.
    # So without this, the first time the camera shakes, it will shake the exact same way.
    _noise.seed = randi()


func _physics_process(delta: float) -> void:
    set_shake_intensity(shake_intensity - delta)
    # The function OS.get_ticks_msec() returns the number of miliseconds since
    # the start of the game. We divide it because otherwise the camera would
    # shake too fast.
    var time_elapsed := OS.get_ticks_msec() / 20.0
    var random_direction := Vector2(
        # We use the time value to sample the noise because given continuous
        # input values, it returns random yet smooth series of numbers.
        #
        # We multiply the time value differently for each function argument to
        # further randomize the shake.
        _noise.get_noise_2d(time_elapsed, time_elapsed * 3.0),
        _noise.get_noise_2d(time_elapsed * 2.0, time_elapsed)
    ).normalized()
    # The Camera2D has an offset property that offsets the view from the
    # camera's current position. It's very useful for screen shake and other
    # animations.
    #
    # Below, we multiply the direction by the square of the shake intensity
    # because it improves the shake's feel.
    offset = random_direction * max_amplitude * shake_intensity * shake_intensity


# The cetera function takes care of turning physics processing on and off depending on the shake intensity value.
func set_shake_intensity(intensity: float) -> void:
    shake_intensity = clamp(intensity, 0.0, 1.0)
    # When comparing floating point numbers, it is safer to use this function over ==.
    # Decimal numbers on the computer have a limited precision which can cause errors in comparisons.
    # To learn more, you can search for "float precision" online.
    var is_shaking := not is_equal_approx(shake_intensity, 0.0)
    set_physics_process(is_shaking)
